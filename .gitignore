
*.rar
*.war
*.class
.spyproject
# mypy
lib/
# Translations
# Pyre type checker
.dart_tool
*.pot
# Flask stuff:
*.swp
.pdm.toml
mvnw
*.py[cod]
.pybuilder/
env.bak/
# IDE files
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
.mypy_cache/
.pytest_cache/
.pytype/
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
# Distribution / packaging
target/
# IntelliJ IDEA
# Application Properties
*.tar
__pycache__/
#  Usually these files are written by a python script from a template
# Django stuff:
.dmypy.json
docs/_build/
# Maven
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
# Jupyter Notebook
.gradle/
ENV/
__pypackages__/
*.manifest
# poetry
#   commonly ignored for libraries.
*.log
db.sqlite3-journal
# Eclipse
# pytype static type analyzer
.tox/
*.so
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
.hypothesis/
*.zip
# Sphinx documentation
#   intended to run in multiple environments; otherwise, check them in:
#pdm.lock
# Compiled bytecode
# Celery stuff
# pyenv
*.ipr
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#   install all needed dependencies.
pubspec.lock
/maven-wrapper.jar
.idea/
/application.yml
# Environments
# Rope project settings
celerybeat.pid
htmlcov/
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
# Logs
# Spyder project settings
#Pipfile.lock
nosetests.xml
.nox/
# Thumbnails
.installed.cfg
*.7z
.coverage.*
.webassets-cache
# Scrapy stuff:
logs/
mvnw.cmd
Thumbs.db
.cache
# pdm
.vscode/
*.sage.py
!.mvn/wrapper/maven-wrapper.jar
*.bz2
develop-eggs/
ehthumbs.db
# Unit test / coverage reports
# Cython debug symbols
# PyBuilder
dmypy.json
# Gradle
$RECYCLE.BIN/
dist/
/site
*.iml
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
/System Volume Information/
ipython_config.py
.LSOverride
.AppleDouble
*.tar.gz
*.mo
*.egg
*.py,cover
# pipenv
eggs/
build/
parts/
#   https://pdm.fming.dev/#use-with-ide
# macOS
.classpath
lib64/
#   This is especially recommended for binary packages to ensure reproducibility, and is more
cython_debug/
# Visual Studio Code
instance/
# Temporary files
.venv
.log
share/python-wheels/
*.spec
*mvnw*
.DS_Store
*.iws
.eggs/
# Windows
pip-delete-this-directory.txt
celerybeat-schedule
.ropeproject
/application.properties
*.cover
# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
local_settings.py
.iml
# .python-version
pip-log.txt
wheels/
MANIFEST
# PyInstaller
# Byte-compiled / optimized / DLL files
var/
*.ear
*.tmp
/target/
/.mvn/
Desktop.ini
# mkdocs documentation
# Spring Boot
db.sqlite3
# JAR files
cover/
# SageMath parsed files
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
target
*.egg-info/
.pyre/
env/
.spyderproject
sdist/
coverage.xml
profile_default/
*.jar
#poetry.lock
# Package Files
venv/
# C extensions
.coverage
venv.bak/
.settings/
#   in version control.
*$py.class
.ipynb_checkpoints
.gitignore
.project
downloads/
# Installer logs
.env
.Python
.scrapy
#   For a library or package, you might want to ignore these files since the code is
# IPython